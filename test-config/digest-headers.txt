



HTTP Working Group                                              R. Polli
Internet-Draft                         Team Digitale, Italian Government
Intended status: Standards Track                               L. Pardue
Expires: May 2, 2020                                          Cloudflare
                                                        October 30, 2019


                             Digest Headers
                draft-ietf-httpbis-digest-headers-latest

Abstract

   This document defines the Digest and Want-Digest header fields for
   HTTP, thus allowing client and server to negotiate an integrity
   checksum of the exchanged resource representation data.

   This document obsoletes RFC 3230.  It replaces the term "instance"
   with "representation", which makes it consistent with the HTTP
   Semantic and Context defined in RFC 7231.

Note to Readers

   _RFC EDITOR: please remove this section before publication_

   Discussion of this draft takes place on the HTTP working group
   mailing list (ietf-http-wg@w3.org), which is archived at
   https://lists.w3.org/Archives/Public/ietf-http-wg/ [1].

   The source code and issues list for this draft can be found at
   https://github.com/httpwg/http-extensions [2].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 2, 2020.




Polli & Pardue             Expires May 2, 2020                  [Page 1]

Internet-Draft               Digest Headers                 October 2019


Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Brief history of integrity header fields  . . . . . . . .   4
     1.2.  This proposal . . . . . . . . . . . . . . . . . . . . . .   4
     1.3.  Goals . . . . . . . . . . . . . . . . . . . . . . . . . .   4
     1.4.  Notational Conventions  . . . . . . . . . . . . . . . . .   5
   2.  Resource representation and representation-data . . . . . . .   6
   3.  Digest Algorithm values . . . . . . . . . . . . . . . . . . .   8
     3.1.  Representation digest . . . . . . . . . . . . . . . . . .  10
       3.1.1.  digest-algorithm encoding examples  . . . . . . . . .  10
   4.  Header Field Specifications . . . . . . . . . . . . . . . . .  11
     4.1.  Want-Digest . . . . . . . . . . . . . . . . . . . . . . .  11
     4.2.  Digest  . . . . . . . . . . . . . . . . . . . . . . . . .  11
   5.  Deprecate Negotiation of Content-MD5  . . . . . . . . . . . .  12
   6.  Broken cryptographic algorithms . . . . . . . . . . . . . . .  12
   7.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  13
     7.1.  Unsolicited Digest response . . . . . . . . . . . . . . .  13
       7.1.1.  Representation data is fully contained in the payload  13
       7.1.2.  Representation data is not contained in the payload .  13
       7.1.3.  Representation data is partially contained in the
               payload i.e. range request  . . . . . . . . . . . . .  14
       7.1.4.  Digest in both Request and Response. Returned value
               depends on representation metadata  . . . . . . . . .  14
       7.1.5.  Digest in both Request and Response. Representation
               data is not contained in the response payload . . . .  15
       7.1.6.  Digest in both Request and Response. Response uses
               id-sha-256. . . . . . . . . . . . . . . . . . . . . .  16
     7.2.  Want-Digest solicited digest responses  . . . . . . . . .  17
       7.2.1.  Client request data is fully contained in the payload  17
       7.2.2.  A client requests an unsupported Digest, the server
               MAY reply with an unsupported digest  . . . . . . . .  18
       7.2.3.  A client requests an unsupported Digest, the server



Polli & Pardue             Expires May 2, 2020                  [Page 2]

Internet-Draft               Digest Headers                 October 2019


               MAY reply with a 400  . . . . . . . . . . . . . . . .  19
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .  19
     8.1.  Digest does not protect the full HTTP message . . . . . .  19
     8.2.  Broken cryptographic algorithms . . . . . . . . . . . . .  19
     8.3.  Other deprecated algorithms . . . . . . . . . . . . . . .  20
     8.4.  Digest for end-to-end integrity . . . . . . . . . . . . .  20
     8.5.  Usage in signatures . . . . . . . . . . . . . . . . . . .  20
     8.6.  Message Truncation  . . . . . . . . . . . . . . . . . . .  21
     8.7.  Algorithm Agility . . . . . . . . . . . . . . . . . . . .  21
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  21
     9.1.  Establish the HTTP Digest Algorithm Values  . . . . . . .  21
     9.2.  The "status" field in the HTTP Digest Algorithm Values  .  21
     9.3.  Deprecate "MD5" Digest Algorithm  . . . . . . . . . . . .  21
     9.4.  Update "CRC32C" Digest Algorithm  . . . . . . . . . . . .  21
     9.5.  Obsolete "SHA" Digest Algorithm . . . . . . . . . . . . .  22
     9.6.  Obsolete "ADLER32" Digest Algorithm . . . . . . . . . . .  22
     9.7.  The "ID-SHA-256" Digest Algorithm . . . . . . . . . . . .  22
     9.8.  The "ID-SHA-512" Digest Algorithm . . . . . . . . . . . .  23
     9.9.  Changes compared to RFC5843 . . . . . . . . . . . . . . .  23
     9.10. Want-Digest Header Field Registration . . . . . . . . . .  23
     9.11. Digest Header Field Registration  . . . . . . . . . . . .  23
   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  24
     10.1.  Normative References . . . . . . . . . . . . . . . . . .  24
     10.2.  Informative References . . . . . . . . . . . . . . . . .  26
     10.3.  URIs . . . . . . . . . . . . . . . . . . . . . . . . . .  26
   Appendix A.  FAQ  . . . . . . . . . . . . . . . . . . . . . . . .  27
   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  28
   Code samples  . . . . . . . . . . . . . . . . . . . . . . . . . .  28
   Changes . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  29
     D.1.  Since draft-ietf-httpbis-digest-headers-00  . . . . . . .  30
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  30

1.  Introduction

   Integrity protection for HTTP content is multi layered and is usually
   achieved across the protocol stack: TCP checksums and TLS [RFC2818]
   record to name but some.

   The HTTP protocol does not provide means to protect the various
   message parts.  Besides, it might be desirable to add additional
   guarantees to the ones provided by the transport layer (eg.  HTTPS).
   This may be in order to:

   o  detect programming errors and corruption of stored data;

   o  address the need for the representation-data to remain unmodified
      throughout multiple hops;




Polli & Pardue             Expires May 2, 2020                  [Page 3]

Internet-Draft               Digest Headers                 October 2019


   o  implement signature mechanisms that cover the desired parts of an
      HTTP exchange;

   o  provide additional protection against failures or attack (see
      [SRI]).

1.1.  Brief history of integrity header fields

   The Content-MD5 header field was originally introduced to provide
   integrity, but HTTP/1.1 ([RFC7231], Appendix B) obsoleted it:

      The Content-MD5 header field has been removed because it was
      inconsistently implemented with respect to partial responses.

   [RFC3230] provided a more flexible solution introducing the concept
   of "instance", and the header fields "Digest" and "Want-Digest".

1.2.  This proposal

   The concept of "selected representation" defined in [RFC7231] made
   [RFC3230] definitions inconsistent with the current standard.  A
   refresh was then required.

   This document updates the "Digest" and "Want-Digest" header field
   definitions to align with [RFC7231] concepts.

   This approach can be easily adapted to use-cases where the
   transferred data does require some sort of manipulation to be
   considered a representation or conveys a partial representation of a
   resource (eg.  Range Requests [RFC7233]).

   Changes are semantically compatible with existing implementations and
   better cover both the request and response cases.

   The value of "Digest" is calculated on selected representation, which
   is tied to the value contained in any "Content-Encoding" or "Content-
   Type" header fields.  Therefore, a given resource may have multiple
   different digest values.

   To allow both parties to exchange a Digest of a representation with
   no content codings [3] two more algorithms are added ("ID-SHA-256"
   and "ID-SHA-512").

1.3.  Goals

   The goals of this proposal are:





Polli & Pardue             Expires May 2, 2020                  [Page 4]

Internet-Draft               Digest Headers                 October 2019


   1.  Digest coverage for either the resource's "representation data"
       or "selected representation data" communicated via HTTP.

   2.  Support for multiple digest algorithms.

   3.  Negotiation of the use of digests.

   The goals do not include:

   HTTP Message integrity:  The digest mechanism described here does not
      cover the full HTTP message nor its semantic, as representation
      metadata are not included in the checksum.

   Header field integrity:  The digest mechanisms described here cover
      only representation and selected representation data, and do not
      protect the integrity of associated representation metadata or
      other message header fields.

   Authentication:  The digest mechanisms described here are not meant
      to support authentication of the source of a digest or of a
      message or anything else.  These mechanisms, therefore, are not a
      sufficient defense against many kinds of malicious attacks.

   Privacy:  Digest mechanisms do not provide message privacy.

   Authorization:  The digest mechanisms described here are not meant to
      support authorization or other kinds of access controls.

1.4.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 ([RFC2119] and [RFC8174]) when, and only when, they appear in all
   capitals, as shown here.

   This document uses the Augmented BNF defined in [RFC5234] and updated
   by [RFC7405] along with the "#rule" extension defined in Section 7 of
   [RFC7230].

   The definitions "representation", "selected representation",
   "representation data", "representation metadata", and "payload body"
   in this document are to be interpreted as described in [RFC7230] and
   [RFC7231].

   The definition "validator" in this document is to be interpreted as
   described in Section 7.2 of [RFC7231].




Polli & Pardue             Expires May 2, 2020                  [Page 5]

Internet-Draft               Digest Headers                 October 2019


2.  Resource representation and representation-data

   To avoid inconsistencies, an integrity mechanism for HTTP messages
   should decouple the checksum calculation:

   o  from the payload body - which may be altered by mechanism like
      Range Requests [RFC7233] or the method (eg.  HEAD);

   o  and from the message body - which depends on "Transfer-Encoding"
      and whatever transformations the intermediaries may apply.

   The following examples show how representation metadata, payload
   transformations and method impacts on the message and payload body.

   Here is a gzip-compressed json object

   Request:


   PUT /entries/1234 HTTP/1.1

   Content-Type: application/json

   Content-Encoding: gzip



   H4sIAItWyFwC/6tWSlSyUlAypANQqgUAREcqfG0AAAA=


   Now the same payload body conveys a malformed json object.

   Request:


   PUT /entries/1234 HTTP/1.1

   Content-Type: application/json



   H4sIAItWyFwC/6tWSlSyUlAypANQqgUAREcqfG0AAAA=


   A Range-Request alters the payload body, conveying a partial
   representation.

   Request:



Polli & Pardue             Expires May 2, 2020                  [Page 6]

Internet-Draft               Digest Headers                 October 2019


   GET /entries/1234 HTTP/1.1

   Range: bytes=1-7




   Response:


   HTTP/1.1 206 Partial Content

   Content-Encoding: gzip

   Content-Type: application/json

   Content-Range: bytes=1-7



   iwgAla3RXA==


   Now the method too alters the payload body.

   Request:


   HEAD /entries/1234 HTTP/1.1

   Accept: application/json

   Accept-Encoding: gzip




   Response:


   HTTP/1.1 200 OK

   Content-Type: application/json

   Content-Encoding: gzip






Polli & Pardue             Expires May 2, 2020                  [Page 7]

Internet-Draft               Digest Headers                 October 2019


3.  Digest Algorithm values

   Digest algorithm values are used to indicate a specific digest
   computation.  For some algorithms, one or more parameters may be
   supplied.


      digest-algorithm = token


   The BNF for "parameter" is as is used in [RFC7230].  All digest-
   algorithm values are case-insensitive.

   The Internet Assigned Numbers Authority (IANA) acts as a registry for
   digest-algorithm values.  The registry contains the following tokens.

   SHA-256:

      *  Description: The SHA-256 algorithm [RFC6234].  The output of
         this algorithm is encoded using the base64 encoding [RFC4648].

      *  Reference: [RFC6234], [RFC4648], this document.

      *  Status: standard

   SHA-512:

      *  Description: The SHA-512 algorithm [RFC6234].  The output of
         this algorithm is encoded using the base64 encoding [RFC4648].

      *  Reference: [RFC6234], [RFC4648], this document.

      *  Status: standard

   MD5:

      *  Description: The MD5 algorithm, as specified in [RFC1321].  The
         output of this algorithm is encoded using the base64 encoding
         [RFC4648].  The MD5 algorithm MUST NOT be used as it's now
         vulnerable to collision attacks [CMU-836068].

      *  Reference: [RFC1321], [RFC4648], this document.

      *  Status: deprecated

   SHA:





Polli & Pardue             Expires May 2, 2020                  [Page 8]

Internet-Draft               Digest Headers                 October 2019


      *  Description: The SHA-1 algorithm [RFC3174].  The output of this
         algorithm is encoded using the base64 encoding [RFC4648].  The
         SHA algorithm is NOT RECOMMENDED as it's now vulnerable to
         collision attacks [IACR-2019-459].

      *  Reference: [RFC3174], [RFC6234], [RFC4648], this document.

      *  Status: obsoleted

   UNIXsum:

      *  Description: The algorithm computed by the UNIX "sum" command,
         as defined by the Single UNIX Specification, Version 2 [UNIX].
         The output of this algorithm is an ASCII decimal-digit string
         representing the 16-bit checksum, which is the first word of
         the output of the UNIX "sum" command.

      *  Reference: [UNIX], this document.

      *  Status: standard

   UNIXcksum:

      *  Description: The algorithm computed by the UNIX "cksum"
         command, as defined by the Single UNIX Specification, Version 2
         [UNIX].  The output of this algorithm is an ASCII digit string
         representing the 32-bit CRC, which is the first word of the
         output of the UNIX "cksum" command.

      *  Reference: [UNIX], this document.

      *  Status: standard

   To allow sender and recipient to provide a checksum which is
   independent from "Content-Encoding", the following additional
   algorithms are defined:

   ID-SHA-512:

      *  Description: The sha-512 digest of the representation-data of
         the resource when no content coding is applied (eg.  "Content-
         Encoding: identity")

      *  Reference: [RFC6234], [RFC4648], this document.

      *  Status: standard

   ID-SHA-256:



Polli & Pardue             Expires May 2, 2020                  [Page 9]

Internet-Draft               Digest Headers                 October 2019


      *  Description: The sha-256 digest of the representation-data of
         the resource when no content coding is applied (eg.  "Content-
         Encoding: identity")

      *  Reference: [RFC6234], [RFC4648], this document.

      *  Status: standard

   If other digest-algorithm values are defined, the associated encoding
   MUST either be represented as a quoted string, or MUST NOT include
   ";" or "," in the character sets used for the encoding.

3.1.  Representation digest

   A representation digest is the value of the output of a digest
   algorithm, together with an indication of the algorithm used (and any
   parameters).


      representation-data-digest = digest-algorithm "="

                                   <encoded digest output>


   As explained in Section 2 the digest is computed on the entire
   selected "representation data" of the resource defined in [RFC7231]:


      representation-data := Content-Encoding( Content-Type( bits ) )


   The encoded digest output uses the encoding format defined for the
   specific digest-algorithm.

3.1.1.  digest-algorithm encoding examples

   The "sha-256" digest-algorithm uses base64 encoding.  Note that
   digest-algoritm values are case insensitive.


      sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=


   The "UNIXsum" digest-algorithm uses ASCII string of decimal digits.


      UNIXsum=30637




Polli & Pardue             Expires May 2, 2020                 [Page 10]

Internet-Draft               Digest Headers                 October 2019


4.  Header Field Specifications

   The following headers are defined

4.1.  Want-Digest

   The Want-Digest message header field indicates the sender's desire to
   receive a representation digest on messages associated with the
   request URI and representation metadata.


     Want-Digest = "Want-Digest" ":" OWS 1#want-digest-value

     want-digest-value = digest-algorithm [ ";" "q" "=" qvalue]

     qvalue = ( "0"  [ "."  0*1DIGIT ] ) /  ( "1"  [ "."  0*1( "0" ) ] )


   If a digest-algorithm is not accompanied by a qvalue, it is treated
   as if its associated qvalue were 1.0.

   The sender is willing to accept a digest-algorithm if and only if it
   is listed in a Want-Digest header field of a message, and its qvalue
   is non-zero.

   If multiple acceptable digest-algorithm values are given, the
   sender's preferred digest-algorithm is the one (or ones) with the
   highest qvalue.

   Two examples of its use are


      Want-Digest: sha-256

      Want-Digest: SHA-512;q=0.3, sha-256;q=1, md5;q=0


4.2.  Digest

   The Digest header field provides a digest of the representation data.


      Digest = "Digest" ":" OWS 1#representation-data-digest


   "Representation data" might be:

   o  fully contained in the message body,



Polli & Pardue             Expires May 2, 2020                 [Page 11]

Internet-Draft               Digest Headers                 October 2019


   o  partially-contained in the message body,

   o  or not at all contained in the message body.

   The resource is specified by the effective request URI and any
   "validator" contained in the message.

   For example, in a response to a HEAD request, the digest is
   calculated using the representation data that would have been
   enclosed in the payload body if the same request had been a GET.

   Digest can be used in requests too.  Returned value depends on the
   representation metadata header fields.

   A Digest header field MAY contain multiple representation-data-digest
   values.  This could be useful for responses expected to reside in
   caches shared by users with different browsers, for example.

   A recipient MAY ignore any or all of the representation-data-digests
   in a Digest header field.  This allows the recipient to chose which
   digest-algorithm(s) to use for validation instead of verifying every
   received representation-data-digest.

   A sender MAY send a representation-data-digest using a digest-
   algorithm without knowing whether the recipient supports the digest-
   algorithm, or even knowing that the recipient will ignore it.

   Two examples of its use are


   Digest: id-sha-512=WZDPaVn/7XgHaAy8pmojAkGWoRx2UFChF41A2svX+TaPm+AbwAgBWnrIiYllu7BNNyealdVLvRwE\nmTHWXvJwew==

   Digest: sha-256=4REjxQ4yrqUVicfSKYNO/cF9zNj5ANbzgDZt3/h3Qxo=, id-sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=


   ...

5.  Deprecate Negotiation of Content-MD5

   This RFC deprecates the negotiation of Content-MD5 as it has been
   obsoleted by [RFC7231]

6.  Broken cryptographic algorithms

   The MD5 algorithm MUST NOT be used as it's now vulnerable to
   collision attacks [CMU-836068].





Polli & Pardue             Expires May 2, 2020                 [Page 12]

Internet-Draft               Digest Headers                 October 2019


   The SHA algorithm is NOT RECOMMENDED as it's now vulnerable to
   collision attacks [IACR-2019-459].

7.  Examples

7.1.  Unsolicited Digest response

7.1.1.  Representation data is fully contained in the payload

   Request:


   GET /items/123




   Response:


   HTTP/1.1 200 OK

   Content-Type: application/json

   Content-Encoding: identity

   Digest: sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=



   {"hello": "world"}


7.1.2.  Representation data is not contained in the payload

   As there is no content coding applied, the "sha-256" and the "id-sha-
   256" digest-values are the same.

   Request:


   HEAD /items/123




   Response:




Polli & Pardue             Expires May 2, 2020                 [Page 13]

Internet-Draft               Digest Headers                 October 2019


   HTTP/1.1 200 OK

   Content-Type: application/json

   Content-Encoding: identity

   Digest: id-sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=




7.1.3.  Representation data is partially contained in the payload i.e.
        range request

   Request:


   GET /items/123

   Range: bytes=1-7




   Response:


   HTTP/1.1 206 Partial Content

   Content-Type: application/json

   Content-Encoding: identity

   Content-Range: bytes 1-7/18

   Digest: sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=



   "hello"


7.1.4.  Digest in both Request and Response.  Returned value depends on
        representation metadata

   Digest can be used in requests too.  Returned value depends on the
   representation metadata header fields.




Polli & Pardue             Expires May 2, 2020                 [Page 14]

Internet-Draft               Digest Headers                 October 2019


   Request:


   PUT /items/123

   Content-Type: application/json

   Content-Encoding: identity

   Accept-Encoding: br

   Digest: sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=



   {"hello": "world"}


   Response:


   Content-Type: application/json

   Content-Encoding: br

   Digest: sha-256=4REjxQ4yrqUVicfSKYNO/cF9zNj5ANbzgDZt3/h3Qxo=



   iwiAeyJoZWxsbyI6ICJ3b3JsZCJ9Aw==


7.1.5.  Digest in both Request and Response.  Representation data is not
        contained in the response payload

   Request "Digest" value is calculated on the enclosed payload.
   Response "Digest" value depends on the representation metadata header
   fields, including "Content-Encoding: br" even when the response does
   not contain a payload body.

   Request:










Polli & Pardue             Expires May 2, 2020                 [Page 15]

Internet-Draft               Digest Headers                 October 2019


   PUT /items/123

   Content-Type: application/json

   Content-Encoding: identity

   Content-Length: 18

   Accept-Encoding: br

   Digest: sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=



   {"hello": "world"}


   Response:


   HTTP/1.1 204 No Content

   Content-Type: application/json

   Content-Encoding: br

   Digest: sha-256=4REjxQ4yrqUVicfSKYNO/cF9zNj5ANbzgDZt3/h3Qxo=




7.1.6.  Digest in both Request and Response.  Response uses id-sha-256.

   The response contains two digest values:

   o  one with no content coding applied, which in this case
      accidentally matches the unencoded digest-value sent in the
      request;

   o  one taking into account the "Content-Encoding".

   Request:









Polli & Pardue             Expires May 2, 2020                 [Page 16]

Internet-Draft               Digest Headers                 October 2019


   PUT /items/123 HTTP/1.1

   Content-Type: application/json

   Content-Encoding: identity

   Accept-Encoding: br

   Digest: sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=



   {"hello": "world"}


   Response:


HTTP/1.1 200 OK

Content-Type: application/json

Content-Encoding: br

Digest: sha-256=4REjxQ4yrqUVicfSKYNO/cF9zNj5ANbzgDZt3/h3Qxo=, id-sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=



iwiAeyJoZWxsbyI6ICJ3b3JsZCJ9Aw==


7.2.  Want-Digest solicited digest responses

7.2.1.  Client request data is fully contained in the payload

   The client requests a digest, preferring sha.  The server is free to
   reply with sha-256 anyway.

   Request:


   GET /items/123 HTTP/1.1

   Want-Digest: sha-256;q=0.3, sha;q=1







Polli & Pardue             Expires May 2, 2020                 [Page 17]

Internet-Draft               Digest Headers                 October 2019


   Response:


   HTTP/1.1 200 OK

   Content-Type: application/json

   Content-Encoding: identity

   Digest: sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=



   {"hello": "world"}


7.2.2.  A client requests an unsupported Digest, the server MAY reply
        with an unsupported digest

   The client requests a sha digest only.  The server is currently free
   to reply with a Digest containing an unsupported algorithm

   Request:


   GET /items/123

   Want-Digest: sha;q=1




   Response:


HTTP/1.1 200 OK

Content-Type: application/json

Content-Encoding: identity

Digest: id-sha-512=WZDPaVn/7XgHaAy8pmojAkGWoRx2UFChF41A2svX+TaPm+AbwAgBWnrIiYllu7BNNyealdVLvRwE\nmTHWXvJwew==



{"hello": "world"}





Polli & Pardue             Expires May 2, 2020                 [Page 18]

Internet-Draft               Digest Headers                 October 2019


7.2.3.  A client requests an unsupported Digest, the server MAY reply
        with a 400

   The client requests a sha Digest, the server advises for sha-256 and
   sha-512

   Request:


   GET /items/123

   Want-Digest: sha;q=1




   Response:


   HTTP/1.1 400 Bad Request

   Want-Digest: sha-256, sha-512




   ...

8.  Security Considerations

8.1.  Digest does not protect the full HTTP message

   This document specifies a data integrity mechanism that protects HTTP
   "representation data", but not HTTP "representation metadata" header
   fields, from certain kinds of accidental corruption.

   While it is not intended as general protection against malicious
   tampering with HTTP messages, this goal can be achieved using
   "Digest" together with a transport-layer security mechanism and
   digital signatures.

8.2.  Broken cryptographic algorithms

   Cryptogrphic alorithms are intended to provide a proof of integrity
   suited towards cryptographic constructions such as signatures.

   However, these rely on collision-resistance for their security proofs
   [CMU-836068].  The MD5 and SHA-1 algorithms are vulnerable to



Polli & Pardue             Expires May 2, 2020                 [Page 19]

Internet-Draft               Digest Headers                 October 2019


   collisions attacks, so MD5 MUST NOT be used and SHA-1 is NOT
   RECOMMENDED.

8.3.  Other deprecated algorithms

   The ADLER32 algorithm defined in [RFC1950] has been deprecated by
   [RFC3309] because under certain conditions it provides weak detection
   of errors and is now NOT RECOMMENDED.

8.4.  Digest for end-to-end integrity

   "Digest" alone does not provide end-to-end integrity of HTTP messages
   over multiple hops, as it just covers the "representation data" and
   not the "representation metadata".

   Besides, it allows to protect "representation data" from buggy
   manipulation, buggy compression, etc.

   Moreover identity digest algorithms (eg.  ID-SHA-256 and ID-SHA-512)
   allow piecing together a resource from different sources (e.g.
   different servers that perhaps apply different content codings)
   enabling the user-agent to detect that the application-layer tasks
   completed properly, before handing off to say the HTML parser, video
   player etc.

   Even a simple mechanism for end-to-end validation is thus valuable.

8.5.  Usage in signatures

   Digital signatures are widely used together with checksums to provide
   the certain identification of the origin of a message [NIST800-32].

   It's important to note that, being the "Digest" header field an hash
   of a resource representation, signing only the "Digest" header field,
   without all the "representation metatada" (eg.  the values of
   "Content-Type" and "Content-Encoding") may expose the communication
   to tampering.

   "Digest" SHOULD always be used over a connection which provides
   integrity at transport layer that protects HTTP header fields.

   A "Digest" header field using NOT RECOMMENDED digest-algorithms
   SHOULD NOT be used in signatures.








Polli & Pardue             Expires May 2, 2020                 [Page 20]

Internet-Draft               Digest Headers                 October 2019


8.6.  Message Truncation

   ...

8.7.  Algorithm Agility

   ...

9.  IANA Considerations

9.1.  Establish the HTTP Digest Algorithm Values

   This memo sets this spec to be the establishing document for the HTTP
   Digest Algorithm Values [4]

9.2.  The "status" field in the HTTP Digest Algorithm Values

   This memo adds the field "Status" to the HTTP Digest Algorithm Values
   [5] registry.  The allowed values for the "Status" fields are
   described below.

   Status  Specify "standard", "experimental", "historic", "obsoleted",
      or "deprecated" according to the type and status of the primary
      document in which the algorithm is defined.

9.3.  Deprecate "MD5" Digest Algorithm

   This memo updates the "MD5" digest algorithm in the HTTP Digest
   Algorithm Values [6] registry:

   o  Digest Algorithm: MD5

   o  Description: As specified in Section 3.

   o  Status: As specified in Section 3.

9.4.  Update "CRC32C" Digest Algorithm

   This memo updates the "CRC32c" digest algorithm in the HTTP Digest
   Algorithm Values [7] registry:

   o  Digest Algorithm: CRC32c

   o  Description: The CRC32c algorithm is a 32-bit cyclic redundancy
      check.  It achieves a better hamming distance (for better error-
      detection performance) than many other 32-bit CRC functions.
      Other places it is used include iSCSI and SCTP.  The 32-bit output
      is encoded in hexadecimal (using between 1 and 8 ASCII characters



Polli & Pardue             Expires May 2, 2020                 [Page 21]

Internet-Draft               Digest Headers                 October 2019


      from 0-9, A-F, and a-f; leading 0's are allowed).  For example,
      CRC32c=0a72a4df and crc32c=A72A4DF are both valid checksums for
      the 3-byte message "dog".

   o  Reference: [RFC4960] appendix B, this document.

   o  Status: standard.

9.5.  Obsolete "SHA" Digest Algorithm

   This memo updates the "SHA" digest algorithm in the HTTP Digest
   Algorithm Values [8] registry:

   o  Digest Algorithm: SHA

   o  Description: As specified in Section 3.

   o  Status: As specified in Section 3.

9.6.  Obsolete "ADLER32" Digest Algorithm

   This memo updates the "ADLER32" digest algorithm in the HTTP Digest
   Algorithm Values [9] registry:

   o  Digest Algorithm: ADLER32

   o  Description: The ADLER32 algorithm is a checksum specified in
      [RFC1950] "ZLIB Compressed Data Format".  The 32-bit output is
      encoded in hexadecimal (using between 1 and 8 ASCII characters
      from 0-9, A-F, and a-f; leading 0's are allowed).  For example,
      ADLER32=03da0195 and ADLER32=3DA0195 are both valid checksums for
      the 4-byte message "Wiki".  This algorithm is obsoleted and SHOULD
      NOT be used.

   o  Status: obsoleted

9.7.  The "ID-SHA-256" Digest Algorithm

   This memo registers the "ID-SHA-256" digest algorithm in the HTTP
   Digest Algorithm Values [10] registry:

   o  Digest Algorithm: ID-SHA-256

   o  Description: As specified in Section 3.

   o  Status: As specified in Section 3.





Polli & Pardue             Expires May 2, 2020                 [Page 22]

Internet-Draft               Digest Headers                 October 2019


9.8.  The "ID-SHA-512" Digest Algorithm

   This memo registers the "ID-SHA-512" digest algorithm in the HTTP
   Digest Algorithm Values [11] registry:

   o  Digest Algorithm: ID-SHA-512

   o  Description: As specified in Section 3.

   o  Status: As specified in Section 3.

9.9.  Changes compared to RFC5843

   The status of "MD5" has been updated to "deprecated", and its
   description states that this algoritm MUST NOT be used.

   The status of "SHA" has been updated to "obsoleted", and its
   description states that this algorithm is NOT RECOMMENDED.

   The status for "CRC32C" has been updated to "standard".

   The "ID-SHA-256" and "ID-SHA-512" algorithms have been added to the
   registry.

9.10.  Want-Digest Header Field Registration

   This section registers the "Want-Digest" header field in the
   "Permanent Message Header Field Names" registry ([RFC3864]).

   Header field name: "Want-Digest"

   Applicable protocol: http

   Status: standard

   Author/Change controller: IETF

   Specification document(s): Section 4.1 of this document

9.11.  Digest Header Field Registration

   This section registers the "Digest" header field in the "Permanent
   Message Header Field Names" registry ([RFC3864]).

   Header field name: "Digest"

   Applicable protocol: http




Polli & Pardue             Expires May 2, 2020                 [Page 23]

Internet-Draft               Digest Headers                 October 2019


   Status: standard

   Author/Change controller: IETF

   Specification document(s): Section 4.2 of this document

10.  References

10.1.  Normative References

   [CMU-836068]
              Carnagie Mellon University, Software Engineering
              Institute, "MD5 Vulnerable to collision attacks", December
              2008, <https://www.kb.cert.org/vuls/id/836068/>.

   [IACR-2019-459]
              Leurent, G. and T. Peyrin, "From Collisions to Chosen-
              Prefix Collisions Application to Full SHA-1", May 2019,
              <https://eprint.iacr.org/2019/459.pdf>.

   [NIST800-32]
              National Institute of Standards and Technology, U.S.
              Department of Commerce, "Introduction to Public Key
              Technology and the Federal PKI Infrastructure", February
              2001, <https://nvlpubs.nist.gov/nistpubs/Legacy/SP/
              nistspecialpublication800-32.pdf>.

   [RFC1321]  Rivest, R., "The MD5 Message-Digest Algorithm", RFC 1321,
              DOI 10.17487/RFC1321, April 1992,
              <https://www.rfc-editor.org/info/rfc1321>.

   [RFC1950]  Deutsch, P. and J-L. Gailly, "ZLIB Compressed Data Format
              Specification version 3.3", RFC 1950,
              DOI 10.17487/RFC1950, May 1996,
              <https://www.rfc-editor.org/info/rfc1950>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC3174]  Eastlake 3rd, D. and P. Jones, "US Secure Hash Algorithm 1
              (SHA1)", RFC 3174, DOI 10.17487/RFC3174, September 2001,
              <https://www.rfc-editor.org/info/rfc3174>.

   [RFC3230]  Mogul, J. and A. Van Hoff, "Instance Digests in HTTP",
              RFC 3230, DOI 10.17487/RFC3230, January 2002,
              <https://www.rfc-editor.org/info/rfc3230>.



Polli & Pardue             Expires May 2, 2020                 [Page 24]

Internet-Draft               Digest Headers                 October 2019


   [RFC3309]  Stone, J., Stewart, R., and D. Otis, "Stream Control
              Transmission Protocol (SCTP) Checksum Change", RFC 3309,
              DOI 10.17487/RFC3309, September 2002,
              <https://www.rfc-editor.org/info/rfc3309>.

   [RFC3864]  Klyne, G., Nottingham, M., and J. Mogul, "Registration
              Procedures for Message Header Fields", BCP 90, RFC 3864,
              DOI 10.17487/RFC3864, September 2004,
              <https://www.rfc-editor.org/info/rfc3864>.

   [RFC4648]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 4648, DOI 10.17487/RFC4648, October 2006,
              <https://www.rfc-editor.org/info/rfc4648>.

   [RFC4960]  Stewart, R., Ed., "Stream Control Transmission Protocol",
              RFC 4960, DOI 10.17487/RFC4960, September 2007,
              <https://www.rfc-editor.org/info/rfc4960>.

   [RFC5234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234,
              DOI 10.17487/RFC5234, January 2008,
              <https://www.rfc-editor.org/info/rfc5234>.

   [RFC5789]  Dusseault, L. and J. Snell, "PATCH Method for HTTP",
              RFC 5789, DOI 10.17487/RFC5789, March 2010,
              <https://www.rfc-editor.org/info/rfc5789>.

   [RFC5843]  Bryan, A., "Additional Hash Algorithms for HTTP Instance
              Digests", RFC 5843, DOI 10.17487/RFC5843, April 2010,
              <https://www.rfc-editor.org/info/rfc5843>.

   [RFC6234]  Eastlake 3rd, D. and T. Hansen, "US Secure Hash Algorithms
              (SHA and SHA-based HMAC and HKDF)", RFC 6234,
              DOI 10.17487/RFC6234, May 2011,
              <https://www.rfc-editor.org/info/rfc6234>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <https://www.rfc-editor.org/info/rfc7230>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <https://www.rfc-editor.org/info/rfc7231>.






Polli & Pardue             Expires May 2, 2020                 [Page 25]

Internet-Draft               Digest Headers                 October 2019


   [RFC7233]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,
              "Hypertext Transfer Protocol (HTTP/1.1): Range Requests",
              RFC 7233, DOI 10.17487/RFC7233, June 2014,
              <https://www.rfc-editor.org/info/rfc7233>.

   [RFC7405]  Kyzivat, P., "Case-Sensitive String Support in ABNF",
              RFC 7405, DOI 10.17487/RFC7405, December 2014,
              <https://www.rfc-editor.org/info/rfc7405>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [UNIX]     The Open Group, "The Single UNIX Specification, Version 2
              - 6 Vol Set for UNIX 98", February 1997.

10.2.  Informative References

   [RFC2818]  Rescorla, E., "HTTP Over TLS", RFC 2818,
              DOI 10.17487/RFC2818, May 2000,
              <https://www.rfc-editor.org/info/rfc2818>.

   [RFC7396]  Hoffman, P. and J. Snell, "JSON Merge Patch", RFC 7396,
              DOI 10.17487/RFC7396, October 2014,
              <https://www.rfc-editor.org/info/rfc7396>.

   [SRI]      Akhawe, D., Braun, F., Marier, F., and J. Weinberger,
              "Subresource Integrity", W3C Recommendation REC-SRI-
              20160623, June 2016,
              <https://www.w3.org/TR/2016/REC-SRI-20160623/>.

10.3.  URIs

   [1] https://lists.w3.org/Archives/Public/ietf-http-wg/

   [2] https://github.com/httpwg/http-extensions

   [3] https://tools.ietf.org/html/rfc7231#section-3.1.2.1

   [4] https://www.iana.org/assignments/http-dig-alg/http-dig-alg.xhtml

   [5] https://www.iana.org/assignments/http-dig-alg/http-dig-alg.xhtml

   [6] https://www.iana.org/assignments/http-dig-alg/http-dig-alg.xhtml

   [7] https://www.iana.org/assignments/http-dig-alg/http-dig-alg.xhtml

   [8] https://www.iana.org/assignments/http-dig-alg/http-dig-alg.xhtml



Polli & Pardue             Expires May 2, 2020                 [Page 26]

Internet-Draft               Digest Headers                 October 2019


   [9] https://www.iana.org/assignments/http-dig-alg/http-dig-alg.xhtml

   [10] https://www.iana.org/assignments/http-dig-alg/http-dig-alg.xhtml

   [11] https://www.iana.org/assignments/http-dig-alg/http-dig-alg.xhtml

Appendix A.  FAQ

   1.  Why remove all references to content-md5?

       Those were unnecessary to understanding and using this spec.

   2.  Why remove references to instance manipulation?

       Those were unnecessary for correctly using and applying the spec.
       An example with Range Request is more than enough.  This doc uses
       the term "partial representation" which should group all those
       cases.

   3.  How to use "Digest" with "PATCH" method?

       The PATCH verb brings some complexities (eg. about representation
       metadata header fields, patch document format, ...),

       *  PATCH entity-headers apply to the patch document and MUST NOT
          be applied to the target resource, see [RFC5789], Section 2.

       *  servers shouldn't assume PATCH semantics for generic media
          types like "application/json" but should instead use a proper
          content-type, eg [RFC7396]

       *  a "200 OK" response to a PATCH request would contain the
          digest of the patched item, and the etag of the new object.
          This behavior - tighly coupled to the application logic -
          gives the client low probability of guessing the actual
          outcome of this operation (eg. concurrent changes, ...)

   4.  Why remove references to delta-encoding?

       Unnecessary for a correct implementation of this spec.  The
       revised spec can be nicely adapted to "delta encoding", but all
       the references here to delta encoding don't add anything to this
       RFC.  Another job would be to refresh delta encoding.

   5.  Why remove references to Digest Authentication?

       This RFC seems to me completely unrelated to Digest
       Authentication but for the word "Digest".



Polli & Pardue             Expires May 2, 2020                 [Page 27]

Internet-Draft               Digest Headers                 October 2019


   6.  What changes in "Want-Digest"?

       We allow to use the "Want-Digest" in responses to advertise the
       supported digest-algorithms and the inability to accept requests
       with unsupported digest-algorithms.

   7.  Does this spec changes supported algorithms?

       This RFC updates [RFC5843] which is still delegated for all
       algorithms updates, and adds two more algorithms: ID-SHA-256 and
       ID-SHA-512 which allows to send a checksum of a resource
       representation with no content codings applied.

Acknowledgements

   The vast majority of this document is inherited from [RFC3230], so
   thanks to J.  Mogul and A.  Van Hoff for their great work.  The
   original idea of refreshing this document arose from an interesting
   discussion with M.  Nottingham, J.  Yasskin and M.  Thomson when
   reviewing the MICE content coding.

Code samples

   _RFC Editor: Please remove this section before publication._

   How can I generate and validate the Digest values shown in the
   examples throughout this document?

   The following python3 code can be used to generate digests for json
   objects using SHA algorithms for a range of encodings.  Note that
   these are formatted as base64.  This function could be adapted to
   other algorithms and should take into account their specific
   formatting rules.


















Polli & Pardue             Expires May 2, 2020                 [Page 28]

Internet-Draft               Digest Headers                 October 2019


import base64, json, hashlib, brotli





def digest(item, encoding=lambda x: x, algorithm=hashlib.sha256):

    json_bytes = json.dumps(item).encode()

    content_encoded = encoding(json_bytes)

    checksum_bytes = algorithm(content_encoded).digest()

    return base64.encodebytes(checksum_bytes).strip()





item = {"hello": "world"}



print("Identity encoding, sha256", digest(item))

# Out: Identity encoding, sha256 4REjxQ4yrqUVicfSKYNO/cF9zNj5ANbzgDZt3/h3Qxo=



print("Brotli encoding, sha256", digest(item, encoding=brotli.compress))

# Out: Brotli encoding, sha256 4REjxQ4yrqUVicfSKYNO/cF9zNj5ANbzgDZt3/h3Qxo=



print("Identity encoding, sha512", digest(item, algorithm=hashlib.sha512))

# Out: Identity encoding, sha512 b'WZDPaVn/7XgHaAy8pmojAkGWoRx2UFChF41A2svX+TaPm+AbwAgBWnrIiYllu7BNNyealdVLvRwE\nmTHWXvJwew==\n'


Changes

   _RFC Editor: Please remove this section before publication._







Polli & Pardue             Expires May 2, 2020                 [Page 29]

Internet-Draft               Digest Headers                 October 2019


D.1.  Since draft-ietf-httpbis-digest-headers-00

   o  Align title with document name

   o  Add id-sha-* algorithm examples

   o  Reference [RFC6234] and [RFC3174] instead of FIPS-1

   o  Deprecate MD5

   o  Obsolete ADLER-32 but don't forbid it

   o  Update CRC32C value in IANA table

Authors' Addresses

   Roberto Polli
   Team Digitale, Italian Government
   Italy

   Email: robipolli@gmail.com


   Lucas Pardue
   Cloudflare

   Email: lucaspardue.24.7@gmail.com
























Polli & Pardue             Expires May 2, 2020                 [Page 30]
